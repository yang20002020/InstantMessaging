1.
gin项目初始化以及gorm的引入
测试：
运行testGorm.go
打开navicat ,查看数据库ginchat
2.
gin引入以及项目目录的创建
运行主程序
浏览器测试：
http://127.0.0.1:8081/index
运行test1.go
浏览器测试：
127.0.0.1:8081/ping

3.
配置数据初始化
（1）主要是添加了app.yml文件
（2）主程序运行go run  main.go
（3）终端会显示：
config app: <nil>
config mysql: dns:root:fendou2017@tcp(127.0.0.1:3306)/ginchat?charset=utf8&parseTime=true&loc=Local

4.
配置数据初始化以及前后端交互测试
（1).运行主程序
（2). 浏览器输入 http://127.0.0.1:8081/user/getUserList
浏览器会显示对应的信息

5.
前后端分离引入swagger

 资料地址: https://pkg.go.dev/github.com/swaggo/swag
使用方法：
(1).下载地址：$ go install github.com/swaggo/swag/cmd/swag@latest
(2). swag init 创建docs文件
(3).go get -u github.com/swaggo/gin-swagger
(4).go get -u github.com/swaggo/files
(5). 运行 主程序
浏览器 127.0.0.1:8081/swagger/index.html，页面会显示swagger对应的页面logo

6.
在package service包中
（1）添加注释格式，注意写的格式不能出现错误，如下所示
// GetIndex
// @Tags         首页
// @Success      200  {string}  welcome
// @Router      /index [get]
（2） 在命令行中输入swag init
（3）浏览器 127.0.0.1:8081/swagger/index.html，进行测试
同理，应用在GetUserList函数
6.
sql日志打印
（1）在InitMySql() 函数中自定义日志模板，打印sql语句
 运行程序，终端会显示
 SELECT * FROM `user_basic` WHERE `user_basic`.`deleted_at` IS NULL

8.
实现用户模块新增、删除以及更新功能
测试
浏览器 127.0.0.1:8081/swagger/index.html，进行测试
输入 姓名、密码以及确认密码、id相关信息，数据库会对应更新user信息

9.
添加电话和邮箱校验
 (1) 运行主程序
（2）浏览器 127.0.0.1:8081/swagger/index.html，进行测试
（3）在浏览器 user/updateUser中根据id修改 用户信息
（4）查看navicat，是否用户信息与上述内容更新一直
10
添加电话和邮箱校验
(1)go get -u -v github.com/asaskevich/govalidator
(2)修改结构体UserBasic及其他
（3）运行主程序
（4）浏览器 127.0.0.1:8081/swagger/index.html，进行测试
（5）如果在浏览器 user/updateUser中根据id修改 用户信息，如果手机号和email
修改格式不对，浏览器会显示出来
（6）正确输入例如 phone：15112345678  邮箱  @126.com
浏览器界面会显示修改正确的提示信息


11
用户名重复注册校验
（1）运行主程序
（2）浏览器 127.0.0.1:8081/swagger/index.html，进行测试
输入数据库中已经注册的姓名，浏览器会显示已经被注册的信息
（3）终端会显示sql语句
SELECT * FROM `user_basic` WHERE name='li' AND `user_basic`.`deleted_at` IS NULL ORDER BY `user_basic`.`id` LIMIT 1

12
MD5加密
(1) 添加字段 Salt，运行testGorm.go使数据库对应的产生新字段
（2）添加 加密和解密相关函数和逻辑
（3）运行主程序
（3）浏览器 127.0.0.1:8081/swagger/index.html，进行测试;
(4)在浏览器上user/createUser 上输入新用户信息包括密码
（5）打开navicat，会对应的显示新增用户信息，包括加密的密码
13
登录操作
测试（1）在swagger浏览界面注册新用户  名称 zhao  密码123
（2）在postman上输入信息验证127.0.0.1:8081/user/findUserByNameAndPwd
name zhao;password 123;可以获取用户信息，查看截图logpicture
（3）在swagger 浏览器上/user/findUserByNameAndPwd
姓名输入 zhao； 密码 输入 123；
同样可以获取用户信息，具体可查看截图logpicture
14
引入token 鉴权
(1)go get -u -v github.com/appleboy/gin-jwt
(2)在github上述地址上复制代码到testNetty.go上
（3）启动testNetty.go
在postman 上输入 127.0.0.1:8000/login?username=admin&password=admin
会显示对应的信息，如截图所示14_引入token鉴权
在postman 上输入127.0.0.1:8000/auth/hello
会显示对应的信息，如截图所示14_引入token鉴权_1;
(4)identity数值会更新显示在浏览器
(5)运行主程序
在swagger 浏览器中创建新用户，在/user/findUserByNameAndPwd中查找对应的用户信息，可以查看到identity
如截图所示14_引入token鉴权_2、如截图所示14_引入token鉴权_3;

15.
引入redis
 (1)引入redis包
（2）修改app.yml配置文件，添加redis相关配置
 (3)修改redis配置文件D:\Redis_windows\redis.windows.conf 对应的bind 192.168.*.*
（4）开启redis  具体操作如下在目录D:\Redis_windows>下输入命令: redis-server  redis.windows.conf
 (5)运行主程序
 (6)终端会显示redis 初始化成功标志，如下所示:redis inited ... PONG
 16
 websocket
 (1)go get -u -v github.com/gorilla/websocket
 测试
 （1）运行主程序
 打开网址jsons.cn/websocket/
 （2）输入ws://localhost:8081/user/sendMsg
 点击 “websocket连接” 按钮，显示已经连接成功， 如图所示16_websocket.png
 （3）输入 信息如 123，点击发送，会显示16_websocket_1.png
 (4) 程序终端会显示16_websocket_2.png

 17
 构建 人员关系表、群信息表、信息表
 （1）在models文件包里创建contact、group_basic 、message 结构体
 （2）优化testGorm，并运行testGorm.go
 （3） 查看navicat 是否已经创建了对应的数据表
 18
   发送接收消息，实现骨架
  (1)go get gopkg.in/fatih/set.v0
  (2)添加相关代码

  测试
  (1)启动redis
  (2)启动主程序
  (3)打开网址jsons.cn/websocket/
  输入 ws://localhost:8081/user/sendUserMsg，点击websocket连接
  会显示 “欢迎进入聊天系统”的提示，如图所示：18_发送消息

  19
    引入前端
   （1）在InstantMessaging目录下复制index.html 文件、asset文件、views文件
    (2)启动 redis  和主程序
    (3) 在浏览器上输入 http://localhost:8081/ 显示对应界面 如图19_引入前端.png所示
  20
    切换到注册页面
    (1) 点击页面中的"注册账号"，页面会切换到注册页面 如图20_注册页面
    (2)输入新注册的用户信息，如图20_注册页面_1
    (3)点击注册后，查看navicat，数据库会显示对应的新用户信息。
 21
  登录成功之后，切换到聊天界面
 22
  在postman上显示好友列表
  （1）确认数据库对应的数据信息如图所示：22_显示好友列表_01、22_显示好友列表_02
  （2）运行主程序 go run main.go
  （3）打开 postman，输入 http://localhost:8081/searchFriends?userId=8
  （4）显示测试结果22_显示好友列表_03、22_显示好友列表_04
